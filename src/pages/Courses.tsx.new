import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast";
import { BookOpen, Layers, Plus, Search, Trash, Pencil, ChevronDown, ChevronRight, Clock, Loader2 } from "lucide-react";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Skeleton } from "@/components/ui/skeleton";
import { getAll, create, deleteById } from "@/api/coreApi";
import { CourseGetByIdType, CourseCreateType, CategoryGetByIdType, LevelCreateType } from "@/api/coreTypes";

const Courses = () => {
  const [courses, setCourses] = useState<CourseGetByIdType[]>([]);
  const [categories, setCategories] = useState<CategoryGetByIdType[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [courseFormData, setCourseFormData] = useState<Partial<CourseCreateType>>({
    name: "",
    description: "",
    categoryId: 0,
    isActive: true,
    levels: []
  });
  const [levelFormData, setLevelFormData] = useState<Partial<LevelCreateType>>({
    name: "",
    description: "",
    price: 0,
    sessionsCount: 0,
    sessionDuration: 0
  });
  const [isCourseDialogOpen, setIsCourseDialogOpen] = useState(false);
  const [isLevelDialogOpen, setIsLevelDialogOpen] = useState(false);
  const [editCourseId, setEditCourseId] = useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [pendingDeleteId, setPendingDeleteId] = useState<number | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const { toast } = useToast();

  // تحميل البيانات من API
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // جلب الكورسات والأقسام بالتوازي
        const [coursesData, categoriesData] = await Promise.all([
          getAll<CourseGetByIdType[]>("Courses"),
          getAll<CategoryGetByIdType[]>("Categories")
        ]);
        
        console.log("API Response - Courses:", coursesData);
        console.log("API Response - Categories:", categoriesData);
        
        // استخراج البيانات من الاستجابة
        const extractData = (response: any) => {
          if (!response) return [];
          if (Array.isArray(response)) return response;
          if (response.data && Array.isArray(response.data)) return response.data;
          if (response.items && Array.isArray(response.items)) return response.items;
          if (response.results && Array.isArray(response.results)) return response.results;
          return [];
        };
        
        setCourses(extractData(coursesData));
        setCategories(extractData(categoriesData));
      } catch (err) {
        console.error("Error fetching courses data:", err);
        setError("حدث خطأ أثناء تحميل البيانات. يرجى المحاولة مرة أخرى.");
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);

  // إضافة مستوى جديد للكورس
  const addLevelToCourse = () => {
    if (!levelFormData.name || !levelFormData.sessionsCount || !levelFormData.sessionDuration || !levelFormData.price) {
      toast({
        title: "خطأ في البيانات",
        description: "يرجى ملء جميع الحقول المطلوبة للمستوى",
        variant: "destructive",
      });
      return;
    }
    
    const newLevel: LevelCreateType = {
      name: levelFormData.name || "",
      description: levelFormData.description || "",
      price: Number(levelFormData.price) || 0,
      sessionsCount: Number(levelFormData.sessionsCount) || 0,
      sessionDuration: Number(levelFormData.sessionDuration) || 0
    };
    
    setCourseFormData(prev => ({
      ...prev,
      levels: [...(prev.levels || []), newLevel]
    }));
    
    setLevelFormData({
      name: "",
      description: "",
      price: 0,
      sessionsCount: 0,
      sessionDuration: 0
    });
    
    setIsLevelDialogOpen(false);
  };

  // حذف مستوى من الكورس
  const removeLevelFromCourse = (index: number) => {
    setCourseFormData(prev => ({
      ...prev,
      levels: (prev.levels || []).filter((_, i) => i !== index)
    }));
  };

  // معالجة البحث
  const filteredCourses = courses.filter(
    (course) => 
      course.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      course.code?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Handle form changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === "number") {
      setCourseFormData({ ...courseFormData, [name]: parseFloat(value) });
    } else {
      setCourseFormData({ ...courseFormData, [name]: value });
    }
  };

  // Handle level form changes
  const handleLevelChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === "number") {
      setLevelFormData({ ...levelFormData, [name]: parseFloat(value) });
    } else {
      setLevelFormData({ ...levelFormData, [name]: value });
    }
  };

  // Handle select changes
  const handleSelectChange = (name: string, value: string) => {
    setCourseFormData({ ...courseFormData, [name]: parseInt(value, 10) });
  };

  // حساب إجمالي سعر ومدة الكورس
  const calculateTotals = () => {
    const levels = courseFormData.levels || [];
    const totalPrice = levels.reduce((sum, lvl) => sum + (parseFloat(String(lvl.price)) || 0), 0);
    const totalDuration = levels.reduce((sum, lvl) => sum + ((parseInt(String(lvl.sessionsCount)) || 0) * (parseInt(String(lvl.sessionDuration)) || 0)), 0);
    
    return { totalPrice, totalDuration };
  };

  // معالجة تقديم النموذج
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!courseFormData.name || !courseFormData.categoryId || !(courseFormData.levels && courseFormData.levels.length > 0)) {
      toast({
        title: "خطأ في البيانات",
        description: "يرجى ملء جميع الحقول المطلوبة وإضافة مستوى واحد على الأقل",
        variant: "destructive",
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // إنشاء كورس جديد باستخدام API
      const courseData: CourseCreateType = {
        name: courseFormData.name || "",
        description: courseFormData.description || "",
        categoryId: Number(courseFormData.categoryId) || 0,
        isActive: true,
        levels: courseFormData.levels || []
      };
      
      console.log("Creating new course:", courseData);
      
      const newCourse = await create<CourseGetByIdType>("Courses", courseData);
      console.log("API Response - New Course:", newCourse);
      
      // إضافة الكورس الجديد إلى الحالة
      setCourses(prev => [...prev, newCourse]);
      
      // إعادة تعيين النموذج وإغلاق الحوار
      setCourseFormData({
        name: "",
        description: "",
        categoryId: 0,
        isActive: true,
        levels: []
      });
      setIsCourseDialogOpen(false);
      
      toast({
        title: "تم بنجاح",
        description: "تم إضافة الكورس بنجاح",
      });
    } catch (error) {
      console.error("Error creating course:", error);
      toast({
        title: "خطأ في الإضافة",
        description: "حدث خطأ أثناء محاولة إضافة الكورس. يرجى المحاولة مرة أخرى.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // معالجة الحذف
  const handleDelete = async (id: number) => {
    try {
      // حذف الكورس باستخدام API
      await deleteById("Courses", id);
      
      // تحديث الحالة المحلية
      const updatedCourses = courses.filter((course) => course.id !== id);
      setCourses(updatedCourses);
      
      toast({
        title: "تم بنجاح",
        description: "تم حذف الكورس بنجاح",
      });
    } catch (error) {
      console.error("Error deleting course:", error);
      toast({
        title: "خطأ في الحذف",
        description: "حدث خطأ أثناء محاولة حذف الكورس. يرجى المحاولة مرة أخرى.",
        variant: "destructive",
      });
    }
  };
  
  // معالجة تأكيد الحذف
  const confirmDelete = (id: number) => {
    setPendingDeleteId(id);
    setIsDeleteDialogOpen(true);
  };
  
  const handleConfirmDelete = () => {
    if (pendingDeleteId !== null) {
      handleDelete(pendingDeleteId);
      setPendingDeleteId(null);
    }
    setIsDeleteDialogOpen(false);
  };

  // عرض حالة التحميل
  if (loading) {
    return (
      <div className="p-4 md:p-8">
        <div className="flex items-center justify-between mb-6">
          <Skeleton className="h-10 w-64" />
          <div className="flex gap-3">
            <Skeleton className="h-10 w-40" />
            <Skeleton className="h-10 w-32" />
          </div>
        </div>
        <Card>
          <CardHeader>
            <Skeleton className="h-6 w-32 mb-2" />
            <Skeleton className="h-4 w-64" />
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {[1, 2, 3, 4, 5].map((i) => (
                <Skeleton key={i} className="h-12 w-full" />
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // عرض حالة الخطأ
  if (error) {
    return (
      <div className="p-4 md:p-8">
        <Card className="w-full max-w-md mx-auto">
          <CardHeader>
            <CardTitle className="text-center text-red-500">خطأ</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center">{error}</p>
            <Button 
              className="mt-4 w-full"
              onClick={() => window.location.reload()}
            >
              إعادة المحاولة
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8">
      <div className="flex flex-col md:flex-row items-center justify-between mb-6">
        <h2 className="text-3xl font-bold tracking-tight mb-4 md:mb-0">إدارة الكورسات</h2>
        <div className="w-full md:w-auto flex flex-col md:flex-row gap-3">
          <div className="relative w-full md:w-64">
            <Search className="absolute right-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="بحث عن كورس..."
              className="pr-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <Dialog open={isCourseDialogOpen} onOpenChange={setIsCourseDialogOpen}>
            <DialogTrigger asChild>
              <Button className="w-full md:w-auto">
                <Plus className="h-4 w-4 ml-2" />
                إضافة كورس
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle>إضافة كورس جديد</DialogTitle>
                <DialogDescription>
                  أدخل بيانات الكورس الجديد ومستوياته.
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={handleSubmit}>
                <div className="grid gap-4 py-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">اسم الكورس *</Label>
                    <Input 
                      id="name"
                      name="name"
                      value={courseFormData.name}
                      onChange={handleChange}
                      placeholder="مثال: اللغة الألمانية"
                      required
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="description">وصف الكورس</Label>
                    <Textarea 
                      id="description"
                      name="description"
                      value={courseFormData.description}
                      onChange={handleChange}
                      placeholder="وصف تفصيلي للكورس..."
                      rows={3}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="categoryId">القسم *</Label>
                    <Select 
                      name="categoryId"
                      value={courseFormData.categoryId?.toString() || ""}
                      onValueChange={(value) => handleSelectChange("categoryId", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="اختر القسم" />
                      </SelectTrigger>
                      <SelectContent>
                        {categories.map((category) => (
                          <SelectItem key={category.id} value={category.id.toString()}>
                            {category.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <Label>مستويات الكورس *</Label>
                      <Dialog open={isLevelDialogOpen} onOpenChange={setIsLevelDialogOpen}>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            <Plus className="h-4 w-4 ml-2" />
                            إضافة مستوى
                          </Button>
                        </DialogTrigger>
                        <DialogContent>
                          <DialogHeader>
                            <DialogTitle>إضافة مستوى جديد</DialogTitle>
                            <DialogDescription>
                              أدخل بيانات المستوى الجديد للكورس.
                            </DialogDescription>
                          </DialogHeader>
                          <div className="grid gap-4 py-4">
                            <div className="space-y-2">
                              <Label htmlFor="levelName">اسم المستوى *</Label>
                              <Input 
                                id="levelName"
                                name="name"
                                value={levelFormData.name}
                                onChange={handleLevelChange}
                                placeholder="مثال: المستوى الأول"
                                required
                              />
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor="levelDescription">وصف المستوى</Label>
                              <Textarea 
                                id="levelDescription"
                                name="description"
                                value={levelFormData.description}
                                onChange={handleLevelChange}
                                placeholder="وصف تفصيلي للمستوى..."
                                rows={2}
                              />
                            </div>
                            
                            <div className="grid grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <Label htmlFor="sessionsCount">عدد الجلسات *</Label>
                                <Input 
                                  id="sessionsCount"
                                  name="sessionsCount"
                                  type="number"
                                  min="1"
                                  value={levelFormData.sessionsCount || ""}
                                  onChange={handleLevelChange}
                                  required
                                />
                              </div>
                              
                              <div className="space-y-2">
                                <Label htmlFor="sessionDuration">مدة الجلسة (ساعة) *</Label>
                                <Input 
                                  id="sessionDuration"
                                  name="sessionDuration"
                                  type="number"
                                  min="0.5"
                                  step="0.5"
                                  value={levelFormData.sessionDuration || ""}
                                  onChange={handleLevelChange}
                                  required
                                />
                              </div>
                            </div>
                            
                            <div className="space-y-2">
                              <Label htmlFor="price">سعر المستوى *</Label>
                              <Input 
                                id="price"
                                name="price"
                                type="number"
                                min="0"
                                value={levelFormData.price || ""}
                                onChange={handleLevelChange}
                                required
                              />
                            </div>
                          </div>
                          <DialogFooter>
                            <Button type="button" onClick={addLevelToCourse}>
                              إضافة المستوى
                            </Button>
                          </DialogFooter>
                        </DialogContent>
                      </Dialog>
                    </div>
                    
                    {(courseFormData.levels || []).length === 0 ? (
                      <div className="text-center py-4 border rounded-md text-muted-foreground">
                        لم يتم إضافة أي مستويات بعد
                      </div>
                    ) : (
                      <div className="border rounded-md overflow-hidden">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>اسم المستوى</TableHead>
                              <TableHead>عدد الجلسات</TableHead>
                              <TableHead>مدة الجلسة</TableHead>
                              <TableHead>السعر</TableHead>
                              <TableHead></TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {(courseFormData.levels || []).map((level, index) => (
                              <TableRow key={index}>
                                <TableCell>{level.name}</TableCell>
                                <TableCell>{level.sessionsCount}</TableCell>
                                <TableCell>{level.sessionDuration} ساعة</TableCell>
                                <TableCell>{level.price} جنيه</TableCell>
                                <TableCell>
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => removeLevelFromCourse(index)}
                                  >
                                    <Trash className="h-4 w-4 text-destructive" />
                                  </Button>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    )}
                    
                    {(courseFormData.levels || []).length > 0 && (
                      <div className="flex justify-between text-sm mt-2">
                        <div>إجمالي المدة: {calculateTotals().totalDuration} ساعة</div>
                        <div>إجمالي السعر: {calculateTotals().totalPrice} جنيه</div>
                      </div>
                    )}
                  </div>
                </div>
                <DialogFooter>
                  <Button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        جاري الإضافة...
                      </>
                    ) : (
                      "إضافة الكورس"
                    )}
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>الكورسات</CardTitle>
          <CardDescription>
            قائمة بجميع الكورسات المتاحة ومستوياتها
          </CardDescription>
        </CardHeader>
        <CardContent>
          {filteredCourses.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              لا توجد كورسات مضافة حالياً
            </div>
          ) : (
            <Accordion type="multiple" className="space-y-2">
              {filteredCourses.map((course) => (
                <AccordionItem key={course.id} value={course.id.toString()} className="border rounded-md">
                  <AccordionTrigger className="px-4 py-2 hover:no-underline">
                    <div className="flex flex-1 items-center justify-between">
                      <div className="flex items-center">
                        <BookOpen className="h-5 w-5 mr-2 text-primary" />
                        <span>{course.name}</span>
                      </div>
                      <div className="flex items-center gap-4 text-sm text-muted-foreground">
                        <div className="flex items-center">
                          <Layers className="h-4 w-4 mr-1" />
                          <span>{course.levels?.length || 0} مستويات</span>
                        </div>
                        <div className="flex items-center">
                          <Clock className="h-4 w-4 mr-1" />
                          <span>{course.totalDuration} ساعة</span>
                        </div>
                      </div>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="px-4 pb-4">
                    <div className="mb-2">
                      <span className="text-sm font-medium">القسم:</span>
                      <span className="text-sm mr-2">{course.categoryName}</span>
                    </div>
                    {course.description && (
                      <div className="mb-4 text-sm text-muted-foreground">
                        {course.description}
                      </div>
                    )}
                    
                    <div className="mb-2 font-medium">المستويات:</div>
                    <div className="border rounded-md overflow-hidden">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>اسم المستوى</TableHead>
                            <TableHead>عدد الجلسات</TableHead>
                            <TableHead>مدة الجلسة</TableHead>
                            <TableHead>السعر</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {(course.levels || []).map((level) => (
                            <TableRow key={level.id}>
                              <TableCell>{level.name}</TableCell>
                              <TableCell>{level.sessionsCount}</TableCell>
                              <TableCell>{level.sessionDuration} ساعة</TableCell>
                              <TableCell>{level.price} جنيه</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                    
                    <div className="mt-4 flex justify-end gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => confirmDelete(course.id)}
                      >
                        <Trash className="h-4 w-4 mr-2 text-destructive" />
                        حذف
                      </Button>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          )}
        </CardContent>
      </Card>
      
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>هل أنت متأكد؟</AlertDialogTitle>
            <AlertDialogDescription>
              سيتم حذف هذا الكورس نهائياً بجميع مستوياته. لا يمكن التراجع عن هذا الإجراء.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>إلغاء</AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmDelete} className="bg-destructive hover:bg-destructive/90">
              حذف
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default Courses;
